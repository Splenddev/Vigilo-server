import mongoose from 'mongoose';

const lecturerMessageSchema = new mongoose.Schema(
  {
    text: { type: String, trim: true, required: true },
    type: {
      type: String,
      enum: ['announcement', 'reminder', 'info'],
      default: 'info',
    },
    author: { type: String, trim: true }, // Could be ObjectId if linking to User
    createdAt: { type: Date, default: Date.now },
  },
  { _id: true }
);

const scheduleInstanceSchema = new mongoose.Schema(
  {
    scheduleId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Schedule',
      required: true,
    },
    classDate: { type: Date, required: true },

    confirmedFinal: { type: Boolean, default: false },

    courseName: { type: String, trim: true },

    roomNumber: { type: String, trim: true },

    classDurationMinutes: { type: Number, default: null }, // NEW: duration in minutes

    classStatus: {
      type: String,
      enum: [
        'unconfirmed',
        'pending_approval',
        'rescheduled',
        'postponed',
        'holding',
        'held',
        'partial',
        'cancelled',
        'missed',
        'disrupted',
        'makeup',
        'offsite',
      ],
      default: 'unconfirmed',
    },

    rescheduledToDate: { type: Date, default: null },
    updatedTime: {
      start: { type: String }, // "HH:mm"
      end: { type: String },
    },
    updatedLocation: { type: String, default: null },
    deliveryMode: {
      type: String,
      enum: ['physical', 'virtual', 'hybrid'],
      default: 'physical',
    },
    isAutoGenerated: { type: Boolean, default: true },

    normalTime: {
      start: { type: String },
      end: { type: String },
    },

    lecturerMessages: [lecturerMessageSchema],

    feedbackFromLecturer: { type: String, trim: true },
    syllabusTopic: { type: String, trim: true },
    notes: { type: String },

    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    attendanceSummary: {
      totalPresent: { type: Number, default: 0 },
      totalAbsent: { type: Number, default: 0 },
      totalLate: { type: Number, default: 0 },
    },
    studentPresence: [
      {
        studentId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        status: {
          type: String,
          enum: ['present', 'absent', 'late'],
          default: 'absent',
        },
      },
    ],
  },
  { timestamps: true }
);

// Ensure attendanceSummary stays consistent
scheduleInstanceSchema.pre('save', function (next) {
  if (this.isModified('studentPresence')) {
    const summary = { totalPresent: 0, totalAbsent: 0, totalLate: 0 };
    for (const s of this.studentPresence) {
      if (s.status === 'present') summary.totalPresent++;
      else if (s.status === 'late') summary.totalLate++;
      else summary.totalAbsent++;
    }
    this.attendanceSummary = summary;
  }
  next();
});

// Indexes
scheduleInstanceSchema.index({ scheduleId: 1, classDate: 1 }, { unique: true });
scheduleInstanceSchema.index({ classDate: 1 });

export default mongoose.model('ScheduleInstance', scheduleInstanceSchema);
