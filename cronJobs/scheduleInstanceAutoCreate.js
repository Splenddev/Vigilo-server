import cron from 'node-cron';
import {
  startOfDay,
  isSameDay,
  getDay,
  differenceInCalendarWeeks,
  isAfter,
} from 'date-fns';
import scheduleInstanceModel from '../models/scheduleInstance.model.js';
import scheduleModel from '../models/schedule.model.js';

const WEEKDAY_MAP = {
  Sunday: 0,
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
};

export const scheduleInstanceCreatorCron = () => {
  cron.schedule('* * * * *', async () => {
    console.log(
      `[ScheduleInstanceCreationCron] Running at ${new Date().toISOString()}`
    );

    try {
      const today = startOfDay(new Date());
      const todayWeekday = today.getDay();

      const schedules = await scheduleModel
        .find({ isActive: true })
        .populate({ path: 'groupId', select: 'members' })
        .lean();

      for (const schedule of schedules) {
        try {
          if (!schedule.classDaysTimes?.length) {
            console.warn(`Schedule ${schedule._id} has no class days/times.`);
            continue;
          }

          const todaysClassDaysTimes = schedule.classDaysTimes.filter(
            (cdt) => WEEKDAY_MAP[cdt.day] === todayWeekday
          );

          if (todaysClassDaysTimes.length === 0) continue;

          // Without startDate, decide if instance should be created:
          // We'll create for today only if repeatPattern allows it
          // For 'once' repeatPattern without startDate, just skip
          if (schedule.repeatPattern === 'once') {
            console.warn(
              `Schedule ${schedule._id} has repeatPattern "once" but no startDate - skipping.`
            );
            continue;
          }

          // For weekly, bi-weekly, monthly and default, create instance for today
          // (no further date checks since no startDate)
          // But for bi-weekly or monthly, we can't compute weeksDiff or weeks of month - so:
          // treat bi-weekly and monthly same as weekly here

          const validToday = [
            'weekly',
            'bi-weekly',
            'monthly',
            'default',
          ].includes(schedule.repeatPattern || 'default');

          if (!validToday) continue;

          const existingInstance = await scheduleInstanceModel.findOne({
            scheduleId: schedule._id,
            classDate: today,
          });

          if (existingInstance) continue;

          const members = schedule.groupId?.members || [];
          const studentPresence = members.map((memberId) => ({
            studentId: memberId,
            status: 'absent',
          }));

          const newInstance = new scheduleInstanceModel({
            scheduleId: schedule._id,
            classDate: today,
            classStatus: 'unconfirmed',
            isAutoGenerated: true,
            studentPresence,
            createdBy: null,
            courseName: schedule.courseTitle,
          });

          await newInstance.save();
          console.log(
            `[ScheduleInstanceCreationCron] Created instance for schedule ${schedule._id} on ${today.toISOString()} with ${members.length} students`
          );
        } catch (innerErr) {
          console.error(
            `[ScheduleInstanceCreationCron] Error processing schedule ${schedule._id}:`,
            innerErr
          );
        }
      }

      console.log('[ScheduleInstanceCreationCron] Finished successfully.');
    } catch (err) {
      console.error('[ScheduleInstanceCreationCron] Error:', err);
    }
  });
};
