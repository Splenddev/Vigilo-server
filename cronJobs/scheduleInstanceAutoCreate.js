import cron from 'node-cron';
import { startOfDay, differenceInCalendarWeeks } from 'date-fns';
import scheduleInstanceModel from '../models/scheduleInstance.model.js';
import scheduleModel from '../models/schedule.model.js';

const WEEKDAY_MAP = {
  Sunday: 0,
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
};

function isSameNthWeekday(today, startDate) {
  const nthOfMonth = Math.floor((today.getDate() - 1) / 7); // 0 = first, 1 = second, etc.
  const nthOfStart = Math.floor((startDate.getDate() - 1) / 7);
  return today.getDay() === startDate.getDay() && nthOfMonth === nthOfStart;
}

export const scheduleInstanceCreatorCron = () => {
  cron.schedule('* * * * *', async () => {
    console.log(
      `[ScheduleInstanceCreationCron] Running at ${new Date().toISOString()}`
    );

    try {
      const today = startOfDay(new Date());
      const todayWeekday = today.getDay();

      const schedules = await scheduleModel
        .find({ isActive: true })
        .populate({ path: 'groupId', select: 'members' })
        .lean();

      for (const schedule of schedules) {
        try {
          if (!schedule.classDaysTimes?.length) {
            console.warn(`Schedule ${schedule._id} has no class days/times.`);
            continue;
          }

          // filter times that match today's weekday
          const todaysClassDaysTimes = schedule.classDaysTimes.filter(
            (cdt) => WEEKDAY_MAP[cdt.day] === todayWeekday
          );
          if (todaysClassDaysTimes.length === 0) continue;

          // no startDate handling
          if (schedule.repeatPattern === 'once') {
            if (!schedule.startDate) {
              console.warn(
                `Schedule ${schedule._id} has repeatPattern "once" but no startDate - skipping.`
              );
              continue;
            }
            // for "once", only create if today matches startDate
            if (
              startOfDay(new Date(schedule.startDate)).getTime() !==
              today.getTime()
            ) {
              continue;
            }
          }

          // bi-weekly check
          if (schedule.repeatPattern === 'bi-weekly') {
            if (!schedule.startDate) {
              console.warn(
                `Schedule ${schedule._id} bi-weekly but no startDate - skipping.`
              );
              continue;
            }
            const weeksDiff = differenceInCalendarWeeks(
              today,
              new Date(schedule.startDate)
            );
            if (weeksDiff % 2 !== 0) continue;
          }

          // monthly check
          if (schedule.repeatPattern === 'monthly') {
            if (!schedule.startDate) {
              console.warn(
                `Schedule ${schedule._id} monthly but no startDate - skipping.`
              );
              continue;
            }
            if (!isSameNthWeekday(today, new Date(schedule.startDate)))
              continue;
          }

          // check if already exists
          const existingInstance = await scheduleInstanceModel.findOne({
            scheduleId: schedule._id,
            classDate: today,
          });
          if (existingInstance) continue;

          const members = schedule.groupId?.members || [];
          const studentPresence = members.map((memberId) => ({
            studentId: memberId,
            status: 'absent',
          }));

          // take first matching class time
          const firstClassTime = todaysClassDaysTimes[0] || {};

          const newInstance = new scheduleInstanceModel({
            scheduleId: schedule._id,
            classDate: today,
            classStatus: 'unconfirmed',
            isAutoGenerated: true,
            studentPresence,
            createdBy: null, // or SYSTEM_USER_ID
            courseName: schedule.courseTitle,
            normalTime: {
              start: firstClassTime.timing.startTime || null,
              end: firstClassTime.timing.endTime || null,
            },
            lecturerMessages: [
              {
                text: 'Auto-generated by schedule cron job.',
                type: 'info',
                author: 'system',
              },
            ],
          });

          await newInstance.save();
          console.log(
            `[ScheduleInstanceCreationCron] Created instance for schedule ${schedule._id} on ${today.toISOString()} with ${members.length} students`
          );
        } catch (innerErr) {
          console.error(
            `[ScheduleInstanceCreationCron] Error processing schedule ${schedule._id}:`,
            innerErr
          );
        }
      }

      console.log('[ScheduleInstanceCreationCron] Finished successfully.');
    } catch (err) {
      console.error('[ScheduleInstanceCreationCron] Error:', err);
    }
  });
};
