import cron from 'node-cron';
import { startOfDay, addDays, endOfDay } from 'date-fns';
import scheduleInstanceModel from '../models/scheduleInstance.model.js';
import scheduleModel from '../models/schedule.model.js';

export const scheduleInstanceCreatorCron = () => {
  // Run once a day at 1am (adjust cron timing as needed)
  cron.schedule('* * * * *', async () => {
    try {
      console.log(
        `[ScheduleInstanceCron] Running at ${new Date().toISOString()}`
      );

      const lookAheadDays = 7;
      const today = startOfDay(new Date());

      // Determine startDate based on day of week
      const todayDay = today.getDay();

      let startDate;
      if (todayDay === 0) {
        // Sunday: start from next Monday (today + 1 day)
        startDate = addDays(today, 1);
      } else {
        // Other days: start from previous Monday
        const daysSinceMonday = todayDay - 1;
        startDate = addDays(today, -daysSinceMonday);
      }

      const endDate = endOfDay(addDays(startDate, lookAheadDays));

      // Load all schedules with their group members
      const schedules = await scheduleModel
        .find({})
        .populate('groupId', 'members');

      // Prepare bulk existing instances query
      const scheduleIds = schedules.map((s) => s._id);
      const existingInstances = await scheduleInstanceModel.find({
        scheduleId: { $in: scheduleIds },
        classDate: { $gte: startDate, $lte: endDate },
      });

      // Create a Set for quick lookup: `${scheduleId}_${dateISO}`
      const existingSet = new Set(
        existingInstances.map(
          (inst) =>
            `${inst.scheduleId.toString()}_${startOfDay(inst.classDate).toISOString()}`
        )
      );

      for (const schedule of schedules) {
        try {
          const { _id: scheduleId, groupId } = schedule;
          if (!groupId || !groupId.members) {
            console.warn(
              `Schedule ${scheduleId} has no group or members assigned.`
            );
            continue;
          }

          const members = groupId.members;

          for (let i = 0; i <= lookAheadDays; i++) {
            const classDate = startOfDay(addDays(startDate, i));
            const key = `${scheduleId.toString()}_${classDate.toISOString()}`;

            if (existingSet.has(key)) {
              // Instance exists, skip
              continue;
            }

            const studentPresence = members.map((memberId) => ({
              studentId: memberId,
              status: 'absent',
            }));

            const newInstance = new scheduleInstanceModel({
              scheduleId,
              classDate,
              classStatus: 'scheduled',
              isAutoGenerated: true,
              studentPresence,
              createdBy: null,
            });

            await newInstance.save();
            existingSet.add(key);

            console.log(
              `[ScheduleInstanceCron] Created instance for schedule ${scheduleId} on ${classDate.toISOString()} with ${members.length} students`
            );
          }
        } catch (innerErr) {
          console.error(
            `[ScheduleInstanceCron] Failed processing schedule ${schedule._id}:`,
            innerErr
          );
        }
      }

      console.log('[ScheduleInstanceCron] Finished successfully.');
    } catch (err) {
      console.error('[ScheduleInstanceCron] Error:', err);
    }
  });
};
