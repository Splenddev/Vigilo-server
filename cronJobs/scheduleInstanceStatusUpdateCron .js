import cron from 'node-cron';
import { startOfDay, parse, isBefore, isAfter, addMinutes } from 'date-fns';
import scheduleInstanceModel from '../models/scheduleInstance.model.js';
import scheduleModel from '../models/schedule.model.js';

export const scheduleInstanceStatusUpdateCron = () => {
  // Runs every 5 minutes
  cron.schedule('*/5 * * * *', async () => {
    console.log(
      `[ScheduleInstanceStatusUpdateCron] Running at ${new Date().toISOString()}`
    );

    try {
      const now = new Date();
      const today = startOfDay(now);

      // Find all schedule instances for today that are active and auto-generated
      const instances = await scheduleInstanceModel
        .find({
          classDate: today,
          isAutoGenerated: true,
        })
        .lean();

      if (instances.length === 0) {
        console.log(
          '[ScheduleInstanceStatusUpdateCron] No instances to update.'
        );
        return;
      }

      // Get schedule IDs from instances
      const scheduleIds = [
        ...new Set(instances.map((i) => i.scheduleId.toString())),
      ];

      // Fetch schedules with classDaysTimes (only for schedules that have instances today)
      const schedules = await scheduleModel
        .find({ _id: { $in: scheduleIds } })
        .lean();

      // Map schedules by id for easy access
      const scheduleMap = schedules.reduce((acc, sch) => {
        acc[sch._id.toString()] = sch;
        return acc;
      }, {});

      for (const instance of instances) {
        try {
          const schedule = scheduleMap[instance.scheduleId.toString()];
          if (!schedule) {
            console.warn(
              `[ScheduleInstanceStatusUpdateCron] No schedule found for instance ${instance._id}`
            );
            continue;
          }

          const todayWeekday = today.getDay();

          // Find classDaysTimes matching today
          const todaysClassDaysTimes = (schedule.classDaysTimes || []).filter(
            (cdt) => WEEKDAY_MAP[cdt.day] === todayWeekday
          );

          if (todaysClassDaysTimes.length === 0) {
            console.warn(
              `[ScheduleInstanceStatusUpdateCron] No classDaysTimes today for schedule ${schedule._id}`
            );
            continue;
          }

          // We might have multiple class times per day, pick the first that matches current time range or just use all to decide status
          let updatedStatus = instance.classStatus;

          for (const classDayTime of todaysClassDaysTimes) {
            const startDateTime = parse(
              classDayTime.timing.startTime,
              'HH:mm',
              today
            );
            const endDateTime = parse(
              classDayTime.timing.endTime,
              'HH:mm',
              today
            );

            if (isBefore(now, startDateTime)) {
              updatedStatus = 'unconfirmed'; // before class start
            } else if (
              !isBefore(now, startDateTime) &&
              isBefore(now, addMinutes(endDateTime, 15))
            ) {
              updatedStatus = 'held'; // during class or within 15 mins after
              break; // if currently ongoing, no need to check other times
            } else if (isAfter(now, addMinutes(endDateTime, 15))) {
              if (
                ['unconfirmed', 'holding', 'scheduled'].includes(
                  instance.classStatus
                )
              ) {
                updatedStatus = 'missed'; // class ended without status update
              }
            }
          }

          if (updatedStatus !== instance.classStatus) {
            await scheduleInstanceModel.updateOne(
              { _id: instance._id },
              { $set: { classStatus: updatedStatus } }
            );
            console.log(
              `[ScheduleInstanceStatusUpdateCron] Updated instance ${instance._id} status from "${instance.classStatus}" to "${updatedStatus}"`
            );
          }
        } catch (innerErr) {
          console.error(
            `[ScheduleInstanceStatusUpdateCron] Error updating instance ${instance._id}:`,
            innerErr
          );
        }
      }

      console.log('[ScheduleInstanceStatusUpdateCron] Finished successfully.');
    } catch (err) {
      console.error('[ScheduleInstanceStatusUpdateCron] Error:', err);
    }
  });
};
